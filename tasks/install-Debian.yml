---
- name: "{{ __mysql_os_name }} - Ensure /etc/mysql/ exists."
  ansible.builtin.file:
    path: /etc/mysql
    owner: root
    group: root
    mode: 0755
    state: directory

- name: "{{ __mysql_os_name }} - Ensure {{ mysql_config_path | dirname }} exists."
  ansible.builtin.file:
    path: "{{ mysql_config_path | dirname }}"
    owner: root
    group: root
    mode: 0755
    state: directory

- name: "{{ __mysql_os_name }} - Ensure /etc/mysql/conf.d exists."
  ansible.builtin.file:
    path: /etc/mysql/conf.d
    owner: root
    group: root
    mode: 0755
    state: directory

- name: "{{ __mysql_os_name }} - Ensure {{ mysql_config_path }} is configured."
  ansible.builtin.template:
    src: my.cnf.j2
    dest: "{{ mysql_config_path }}"
    owner: root
    group: root
    mode: 0644
  notify: Restart mysql

- name: "{{ __mysql_os_name }} - Ensure MySQL python package is installed."
  ansible.builtin.apt:
    name: "{{ mysql_python_package }}"
    state: present

- name: "{{ __mysql_os_name }} - Ensure MySQL packages are installed."
  ansible.builtin.apt:
    name: "{{ mysql_packages }}"
    state: present
  register: mysql_install_packages

- name: "{{ __mysql_os_name }} - Ensure alternatives point to mysql.cnf."
  community.general.alternatives:
    name: my.cnf
    path: "/etc/mysql/{{ mysql_provider }}.cnf"

- name: "{{ __mysql_os_name }} - Post-installation."
  block:
    - name: "{{ __mysql_os_name }} - Remove existing /root/.my.cnf."
      ansible.builtin.file:
        path: /root/.my.cnf
        state: absent

    - when: mysql_provider == "mariadb"
      block:
        - name: "{{ __mysql_os_name }} - Check if extra configuration files are present."
          ansible.builtin.find:
            paths:
              - /etc/mysql/conf.d/
              - /etc/mysql/mariadb.conf.d/
          register: __mysql_extra_config_files

        - name: "{{ __mysql_os_name }} - Remove the extra confguration files."
          ansible.builtin.file:
            path: "{{ item.path }}"
            state: absent
          loop: "{{ __mysql_extra_config_files.files }}"
          when: item.path != mysql_config_path

    - name: "{{ __mysql_os_name }} - Ensure MySQL is started."
      ansible.builtin.service:
        name: "{{ mysql_service }}"
        state: started

  when: mysql_install_packages.changed
